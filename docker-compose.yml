# FluLink AI-Native 本地开发环境
# 基于《德道经》"无为而治"哲学，实现服务间的自然协作

version: '3.8'

services:
  # PocketBase 后端服务 - 数据存储与认证
  pocketbase:
    build:
      context: ./pocketbase
      dockerfile: Dockerfile
    container_name: flulink-pocketbase
    ports:
      - "8090:8090"
    environment:
      - PB_ENCRYPTION_KEY=${PB_ENCRYPTION_KEY:-your-32-character-encryption-key-here}
      - PB_HOOKS_DIR=/app/pocketbase/hooks
      - PB_PUBLIC_URL=http://localhost:8090
      - PB_ADMIN_EMAIL=${PB_ADMIN_EMAIL:-admin@flulink.app}
      - PB_ADMIN_PASSWORD=${PB_ADMIN_PASSWORD:-Flulink2025!Admin}
      - AI_AGENT_URL=http://ai-agent:8000
      - CHROMA_URL=http://chroma:8000
    volumes:
      - pocketbase_data:/pb_data
      - ./pocketbase/pb_hooks:/app/pocketbase/hooks
      - ./pocketbase/pb_migrations:/app/pocketbase/migrations
    networks:
      - flulink-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8090/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Chroma 向量数据库 - AI 智能层存储
  chroma:
    build:
      context: ./chroma
      dockerfile: Dockerfile
    container_name: flulink-chroma
    ports:
      - "8001:8000"
    environment:
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_HTTP_PORT=8000
      - CHROMA_PERSIST_DIRECTORY=/chroma/chroma
    volumes:
      - chroma_data:/chroma/chroma
      - ./chroma/collections:/chroma/collections
    networks:
      - flulink-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # AI Agent 智能服务 - Context7 集成
  ai-agent:
    build:
      context: ./ai-agent
      dockerfile: Dockerfile
    container_name: flulink-ai-agent
    ports:
      - "8000:8000"
    environment:
      - CONTEXT7_API_KEY=${CONTEXT7_API_KEY:-ctx7sk-3eff1f70-bd18-43af-955d-c2a3f0f94f45}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY:-your-deepseek-api-key}
      - POCKETBASE_URL=http://pocketbase:8090
      - POCKETBASE_ADMIN_EMAIL=${PB_ADMIN_EMAIL:-admin@flulink.app}
      - POCKETBASE_ADMIN_PASSWORD=${PB_ADMIN_PASSWORD:-Flulink2025!Admin}
      - CHROMA_URL=http://chroma:8000
      - ENVIRONMENT=development
    volumes:
      - ./ai-agent/config:/app/config
      - ./ai-agent/models:/app/models
    networks:
      - flulink-network
    depends_on:
      pocketbase:
        condition: service_healthy
      chroma:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Next.js 前端服务 - 用户界面
  nextjs-frontend:
    build:
      context: ./nextjs-frontend
      dockerfile: Dockerfile
    container_name: flulink-frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_POCKETBASE_URL=http://localhost:8090
      - NEXT_PUBLIC_AI_AGENT_URL=http://localhost:8000
      - NEXT_PUBLIC_CHROMA_URL=http://localhost:8001
      - NEXT_PUBLIC_APP_URL=http://localhost:3000
    volumes:
      - ./nextjs-frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - flulink-network
    depends_on:
      pocketbase:
        condition: service_healthy
      ai-agent:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis 缓存服务 - 性能优化
  redis:
    image: redis:7-alpine
    container_name: flulink-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - flulink-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx 反向代理 - 生产环境路由
  nginx:
    image: nginx:alpine
    container_name: flulink-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    networks:
      - flulink-network
    depends_on:
      - nextjs-frontend
      - pocketbase
      - ai-agent
    profiles:
      - production

# 网络配置
networks:
  flulink-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷配置
volumes:
  pocketbase_data:
    driver: local
  chroma_data:
    driver: local
  redis_data:
    driver: local

# 开发环境快速启动命令
# docker-compose up -d pocketbase chroma ai-agent nextjs-frontend
# 
# 生产环境启动命令
# docker-compose --profile production up -d
